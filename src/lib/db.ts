
'use server';

import {db} from './firebase';
import {collection, addDoc, getDocs, updateDoc, deleteDoc, doc, serverTimestamp, query, orderBy, Timestamp} from 'firebase/firestore';

// --- Items (formerly Snacks) ---

export interface Snack { // Internal interface name remains Snack for now to minimize breaking changes
  id: string;
  name: string;
  category: string;
  price: number;
  cost?: number; // Optional cost price
  itemCode?: string; // Optional item code
}

// Use 'snack' as the collection name consistently
const snacksCollection = collection(db, 'snack');

// Input type excludes the 'id' as it's generated by Firestore
export interface SnackInput extends Omit<Snack, 'id'> {}


export async function addSnackToDb(item: SnackInput) { // Parameter name changed for clarity
  try {
    const itemData = {
      ...item,
      price: Number(item.price) || 0,
      cost: item.cost !== undefined ? Number(item.cost) : undefined,
      itemCode: item.itemCode || '',
    };
    await addDoc(snacksCollection, itemData);
    return {success: true};
  } catch (e: any) {
    console.error('Error adding item document: ', e);
    return {success: false, message: e.message};
  }
}

export async function updateSnackInDb(id: string, item: SnackInput) { // Parameter name changed for clarity
  try {
    const itemData = {
        ...item,
        price: Number(item.price) || 0,
        cost: item.cost !== undefined ? Number(item.cost) : undefined,
        itemCode: item.itemCode || '',
    };
    const itemDoc = doc(db, 'snack', id);
    await updateDoc(itemDoc, itemData);
    return {success: true};
  } catch (e: any) {
    console.error('Error updating item document: ', e);
    return {success: false, message: e.message};
  }
}

export async function deleteSnackFromDb(id: string) {
  try {
    const itemDoc = doc(db, 'snack', id);
    await deleteDoc(itemDoc);
    return {success: true};
  } catch (e: any) {
    console.error('Error deleting item document: ', e);
    return {success: false, message: e.message};
  }
}

export async function getSnacksFromDb(): Promise<Snack[]> {
  try {
    const itemSnapshot = await getDocs(snacksCollection);
    const items = itemSnapshot.docs.map(docSnap => {
        const data = docSnap.data();
        const price = Number(data.price);
        const cost = data.cost !== undefined ? Number(data.cost) : undefined;

        if (isNaN(price)) {
            console.warn(`Document ${docSnap.id} has invalid price: ${data.price}. Setting price to 0.`);
        }
        if (data.cost !== undefined && isNaN(cost!)) {
            console.warn(`Document ${docSnap.id} has invalid cost: ${data.cost}. Setting cost to undefined.`);
        }
        return {
          id: docSnap.id,
          name: data.name || 'Unnamed Item',
          category: data.category || 'Uncategorized',
          price: isNaN(price) ? 0 : price,
          cost: data.cost !== undefined && !isNaN(cost!) ? cost : undefined,
          itemCode: data.itemCode || '',
        } as Snack;
    });
    return items;
  } catch (e: any) {
    console.error('Error getting item documents: ', e);
    return [];
  }
}


// --- Bills ---

export interface BillItem {
    name: string;
    price: number; // Selling price
    quantity: number;
    itemCode?: string; // Optional item code
}

export interface Bill {
    id: string; // Firestore document ID
    orderNumber: string;
    customerName?: string;
    customerPhoneNumber?: string;
    tableNumber?: string;
    notes?: string;
    items: BillItem[];
    serviceCharge: number;
    totalAmount: number;
    createdAt: Timestamp | Date;
    lastUpdatedAt?: Timestamp | Date;
}

export interface BillInput extends Omit<Bill, 'id' | 'createdAt' | 'lastUpdatedAt'> {}

const billsCollection = collection(db, 'bills');

export async function addBillToDb(bill: BillInput) {
    try {
      const docRef = await addDoc(billsCollection, {
        ...bill,
        customerName: bill.customerName || '',
        customerPhoneNumber: bill.customerPhoneNumber || '',
        tableNumber: bill.tableNumber || '',
        notes: bill.notes || '',
        createdAt: serverTimestamp()
      });
      return {success: true, id: docRef.id};
    } catch (e: any) {
      console.error('Error adding bill document: ', e);
      return {success: false, message: e.message, id: undefined };
    }
}

export async function updateBillInDb(id: string, bill: BillInput) {
    try {
        const billDoc = doc(db, 'bills', id);
        await updateDoc(billDoc, {
            ...bill,
            customerName: bill.customerName || '',
            customerPhoneNumber: bill.customerPhoneNumber || '',
            tableNumber: bill.tableNumber || '',
            notes: bill.notes || '',
            lastUpdatedAt: serverTimestamp()
        });
        return {success: true};
    } catch (e: any) {
        console.error('Error updating bill document: ', e);
        return {success: false, message: e.message};
    }
}


export async function getBillsFromDb(): Promise<Bill[]> {
    try {
      const billsQuery = query(billsCollection, orderBy('createdAt', 'desc'));
      const billSnapshot = await getDocs(billsQuery);
      return billSnapshot.docs.map(docSnap => {
        const data = docSnap.data();
        // Ensure items array exists and each item has an itemCode (even if empty)
        const itemsWithCode = (data.items || []).map((item: any) => ({
          name: item.name || 'Unknown Item',
          price: Number(item.price) || 0,
          quantity: Number(item.quantity) || 0,
          itemCode: item.itemCode || '', 
        }));

        return {
          id: docSnap.id,
          orderNumber: data.orderNumber,
          customerName: data.customerName || '',
          customerPhoneNumber: data.customerPhoneNumber || '',
          tableNumber: data.tableNumber || '',
          notes: data.notes || '',
          items: itemsWithCode,
          serviceCharge: data.serviceCharge,
          totalAmount: data.totalAmount,
          createdAt: data.createdAt,
          lastUpdatedAt: data.lastUpdatedAt,
        } as Bill;
      })
    } catch (e: any) {
      console.error('Error getting bill documents: ', e);
      return [];
    }
}

